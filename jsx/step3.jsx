#target photoshop

// ==== –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–π ====
var configPath = "D:/project/absentia8/temp_config.json";
var orientationPath = "D:/project/absentia8/orientations.json";

var config = loadConfig(configPath);
if (!config) {
    alert("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.");
    exit();
}

var orientationMap = loadOrientationList(orientationPath);
if (!orientationMap) {
    alert("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å orientations.json. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ orientation.jsx");
    exit();
}

var sourceFolder = Folder(config.folder.replace(/\//g, '\\'));
var targetFolder = Folder((config.targetFolder || "D:/project/absentia8/Result").replace(/\//g, '\\'));
var mockupCount = parseInt(config.mockupCount || "0");
var mockupFormat = (config.mockupFormat || "png").toLowerCase();
var mockupResolution = config.mockupResolution || "original";

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞–ø–æ–∫
var horizontalMockups = null;
var verticalMockups = null;
var squareMockups = null;

if (config.horizontalMockups && config.horizontalMockups.length > 0) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç–∏ –∫ Windows-—Ñ–æ—Ä–º–∞—Ç—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    var hPath = config.horizontalMockups.replace(/\//g, '\\');
    horizontalMockups = Folder(hPath);
    $.writeln("üß™ –°–æ–∑–¥–∞–Ω horizontalMockups: " + hPath);
} else {
    $.writeln("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: horizontalMockups –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!");
}

if (config.verticalMockups && config.verticalMockups.length > 0) {
    var vPath = config.verticalMockups.replace(/\//g, '\\');
    verticalMockups = Folder(vPath);
    $.writeln("üß™ –°–æ–∑–¥–∞–Ω verticalMockups: " + vPath);
} else {
    $.writeln("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: verticalMockups –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!");
}

if (config.squareMockups && config.squareMockups.length > 0) {
    var sPath = config.squareMockups.replace(/\//g, '\\');
    squareMockups = Folder(sPath);
    $.writeln("üß™ –°–æ–∑–¥–∞–Ω squareMockups: " + sPath);
} else {
    $.writeln("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: squareMockups –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!");
}

// –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
$.writeln("üß™ === –û–¢–õ–ê–î–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===");
$.writeln("üß™ config.horizontalMockups = '" + (config.horizontalMockups || "–ü–£–°–¢–û") + "'");
$.writeln("üß™ config.verticalMockups = '" + (config.verticalMockups || "–ü–£–°–¢–û") + "'");
$.writeln("üß™ config.squareMockups = '" + (config.squareMockups || "–ü–£–°–¢–û") + "'");

$.writeln("üß™ horizontalMockups object = " + horizontalMockups);
$.writeln("üß™ horizontalMockups exists = " + (horizontalMockups ? horizontalMockups.exists : "NULL"));
$.writeln("üß™ horizontalMockups fsName = " + (horizontalMockups ? horizontalMockups.fsName : "NULL"));

$.writeln("üß™ verticalMockups object = " + verticalMockups);
$.writeln("üß™ verticalMockups exists = " + (verticalMockups ? verticalMockups.exists : "NULL"));
$.writeln("üß™ verticalMockups fsName = " + (verticalMockups ? verticalMockups.fsName : "NULL"));

function loadConfig(path) {
    var file = new File(path);
    if (!file.exists) return null;
    file.open("r");
    var str = file.read();
    file.close();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
    var obj = {};
    try {
        // –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ BOM –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        str = str.replace(/^\uFEFF/, '').replace(/^\s+|\s+$/g, '');
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–µ—à–∏ –¥–ª—è Windows –ø—É—Ç–µ–π
        str = str.replace(/\\\\/g, '/').replace(/\\/g, '/');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º eval (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
        obj = eval('(' + str + ')');
        $.writeln("üß™ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ eval()");
        
        // –í—ã–≤–æ–¥–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        $.writeln("üß™ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—É—Ç–∏:");
        for (var key in obj) {
            $.writeln("üß™   " + key + ": '" + obj[key] + "'");
        }
        
    } catch (e) {
        $.writeln("üß™ –û—à–∏–±–∫–∞ eval(), –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ regex –ø–∞—Ä—Å–∏–Ω–≥: " + e);
        // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π regex –ø–∞—Ä—Å–∏–Ω–≥
        str.replace(/"([^\"]+)":\s*"([^\"]*)"/g, function (_, key, value) {
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∏ –∑–¥–µ—Å—å —Ç–æ–∂–µ
            value = value.replace(/\\\\/g, '/').replace(/\\/g, '/');
            obj[key] = value;
        });
    }
    
    return obj;
}

function loadOrientationList(path) {
    var file = new File(path);
    if (!file.exists) return null;
    file.open("r");
    var content = file.read();
    file.close();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –æ—Ç BOM –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    content = content.replace(/^\uFEFF/, '').replace(/^\s+|\s+$/g, '');
    
    var list = eval('(' + content + ')');
    var map = {};
    for (var i = 0; i < list.length; i++) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º filename –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        var cleanFilename = list[i].filename.replace(/^\s+|\s+$/g, '');
        map[cleanFilename] = list[i].orientation;
        $.writeln("üß™ –î–æ–±–∞–≤–ª–µ–Ω –≤ orientationMap: '" + cleanFilename + "' -> '" + list[i].orientation + "'");
    }
    return map;
}

function getMockupList(folder) {
    if (!folder || !folder.exists) return [];
    return folder.getFiles("*.psd");
}

function replaceSmartObjectContents(imagePath) {
    var internalDoc = app.activeDocument;
    var targetW = internalDoc.width.value;
    var targetH = internalDoc.height.value;

    var imageDoc = app.open(new File(imagePath));
    var imgW = imageDoc.width.value;
    var imgH = imageDoc.height.value;

    var scale = Math.max(targetW / imgW, targetH / imgH);
    imageDoc.resizeImage(UnitValue(imgW * scale, "px"), UnitValue(imgH * scale, "px"));

    imageDoc.selection.selectAll();
    imageDoc.selection.copy();
    imageDoc.close(SaveOptions.DONOTSAVECHANGES);

    var pastedLayer = internalDoc.paste();
    var dx = (targetW - (pastedLayer.bounds[2].value - pastedLayer.bounds[0].value)) / 2 - pastedLayer.bounds[0].value;
    var dy = (targetH - (pastedLayer.bounds[3].value - pastedLayer.bounds[1].value)) / 2 - pastedLayer.bounds[1].value;
    pastedLayer.translate(dx, dy);

    for (var i = internalDoc.layers.length - 1; i >= 0; i--) {
        if (internalDoc.layers[i] !== pastedLayer) {
            internalDoc.layers[i].remove();
        }
    }

    internalDoc.save();
    internalDoc.close(SaveOptions.SAVECHANGES);
}

function saveComposite(doc, path, format) {
    var file = new File(path);
    if (format === "jpg") {
        var jpgOpts = new JPEGSaveOptions();
        jpgOpts.quality = 12;
        doc.saveAs(file, jpgOpts, true);
    } else {
        var pngOpts = new PNGSaveOptions();
        doc.saveAs(file, pngOpts, true);
    }
}

var images = sourceFolder.getFiles(/\.(jpg|jpeg|png)$/i);
for (var i = 0; i < images.length; i++) {
    var imgFile = images[i];
    var fileName = imgFile.name;
    var baseName = fileName.replace(/\.[^\.]+$/, "");
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    var cleanFileName = fileName.replace(/^\s+|\s+$/g, '');
    var orientation = orientationMap[cleanFileName];

    $.writeln("üß™ === –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–ê ===");
    $.writeln("üìå FILE: [" + fileName + "]");
    $.writeln("üìå CLEAN FILE: [" + cleanFileName + "]");
    
    // –û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ orientationMap
    var matched = false;
    for (var k in orientationMap) {
        $.writeln("üßæ MAP KEY: [" + k + "] -> [" + orientationMap[k] + "]");
        if (k === cleanFileName) {
            $.writeln("‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!");
            matched = true;
        }
    }
    if (!matched) {
        $.writeln("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –°–û–í–ü–ê–î–ï–ù–ò–Ø –î–õ–Ø: " + cleanFileName);
    }

    if (!orientation) {
        $.writeln("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è " + cleanFileName);
        continue;
    }

    $.writeln("üß≠ " + baseName + " ‚Üí –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: '" + orientation + "'");

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
    $.writeln("üß™ === –í–´–ë–û–† –ü–ê–ü–ö–ò –ú–ê–ö–ï–¢–û–í ===");
    $.writeln("üß™ orientation === 'horizontal': " + (orientation === "horizontal"));
    $.writeln("üß™ orientation === 'vertical': " + (orientation === "vertical"));
    $.writeln("üß™ horizontalMockups —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + (horizontalMockups ? "–î–ê" : "–ù–ï–¢"));
    $.writeln("üß™ verticalMockups —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + (verticalMockups ? "–î–ê" : "–ù–ï–¢"));
    $.writeln("üß™ squareMockups —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + (squareMockups ? "–î–ê" : "–ù–ï–¢"));

    var mockupFolder = null;
    if (orientation === "horizontal") {
        mockupFolder = horizontalMockups;
        $.writeln("‚û°Ô∏è –í–´–ë–†–ê–ù–ê horizontalMockups");
    } else if (orientation === "vertical") {
        mockupFolder = verticalMockups;
        $.writeln("‚û°Ô∏è –í–´–ë–†–ê–ù–ê verticalMockups");
    } else {
        mockupFolder = squareMockups;
        $.writeln("‚û°Ô∏è –í–´–ë–†–ê–ù–ê squareMockups");
    }

    $.writeln("‚û°Ô∏è –ò–¢–û–ì–û–í–ê–Ø mockupFolder = " + (mockupFolder ? mockupFolder.fsName : "NULL"));

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!mockupFolder) {
        $.writeln("‚ùå –ü–∞–ø–∫–∞ –º–∞–∫–µ—Ç–æ–≤ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏: " + orientation);
        continue;
    }
    
    if (!mockupFolder.exists) {
        $.writeln("‚ùå –ü–∞–ø–∫–∞ –º–∞–∫–µ—Ç–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + mockupFolder.fsName);
        continue;
    }

    var mockupList = getMockupList(mockupFolder);
    $.writeln("‚û°Ô∏è mockupList: " + mockupList.length + " —Ñ–∞–π–ª–æ–≤ –≤ " + mockupFolder.fsName);
    for (var f = 0; f < mockupList.length; f++) {
        $.writeln("   ‚Üí " + mockupList[f].name);
    }

    if (mockupList.length === 0) {
        $.writeln("‚ö†Ô∏è –ù–µ—Ç PSD –º–∞–∫–µ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ: " + mockupFolder.fsName);
        continue;
    }

    var usedIndices = {};
    for (var m = 0; m < mockupCount && m < mockupList.length; m++) {
        var candidate;
        do {
            candidate = Math.floor(Math.random() * mockupList.length);
        } while (usedIndices[candidate]);
        usedIndices[candidate] = true;

        var mockupFile = mockupList[candidate];
        $.writeln("üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞–∫–µ—Ç: " + mockupFile.name + " –∏–∑ –ø–∞–ø–∫–∏ " + mockupFolder.fsName);

        try {
            var mockupDoc = app.open(mockupFile);
        } catch (e) {
            $.writeln("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è PSD: " + mockupFile.fsName + " ‚Üí " + e);
            continue;
        }

        var smartLayer = null;
        for (var l = 0; l < mockupDoc.layers.length; l++) {
            var lyr = mockupDoc.layers[l];
            if (lyr.kind === LayerKind.SMARTOBJECT && lyr.name === "Placeholder") {
                smartLayer = lyr;
                break;
            }
        }

        if (!smartLayer) {
            $.writeln("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω PSD –±–µ–∑ —Å–ª–æ—è Placeholder: " + mockupFile.name);
            mockupDoc.close(SaveOptions.DONOTSAVECHANGES);
            continue;
        }

        app.activeDocument.activeLayer = smartLayer;
        executeAction(stringIDToTypeID("placedLayerEditContents"), undefined, DialogModes.NO);
        replaceSmartObjectContents(imgFile.fsName);

        if (mockupResolution !== "original") {
            mockupDoc.resizeImage(undefined, undefined, parseInt(mockupResolution));
        }

        var resultPath = targetFolder.fsName + "/" + baseName + "_mockup_" + (m + 1) + "." + mockupFormat;
        $.writeln("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " + resultPath);
        saveComposite(mockupDoc, resultPath, mockupFormat);

        mockupDoc.close(SaveOptions.DONOTSAVECHANGES);
    }
}